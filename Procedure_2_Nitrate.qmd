---
title: "Nitrate Flow Injection"
author: "Kantnerova et al. (2023)"
date: "`r format(Sys.Date(), '%d %b %Y')`"
number-sections: false
toc: true
toc-depth: 2
fig-width: 8
fig-height: 6
df-print: tibble
embed-resources: true
format: 
  html: 
    code-tools: true
    code-fold: false
    code-summary: "Show the code"
    toc-float: true
crossref:
  fig-prefix: Fig.
  tbl-prefix: Table
  ref-hyperlink: true
editor: source
editor_options: 
  chunk_output_type: console
---

# Setup

Using `r R.version.string` , @R, tidyverse version `r packageVersion("tidyverse")`, @tidyverse, and isoorbi version `r packageVersion("isoorbi")`.

```{r}
#| label: setup
#| message: false

# load packages
# libraries
library(isoorbi) # load isoorbi R package
library(dplyr) # for mutating data frames
library(stringr) # for extarcting text information
library(ggplot2) # for data visualization
library(cowplot) # arrange multipanel plots
```

```{r, include=FALSE}
#| label: global knitting options for code rendering
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#>",
  dev = c("png", "pdf"), fig.keep = "all",
  dev.args = list(pdf = list(encoding = "WinAnsi", useDingbats = FALSE)),
  fig.path = sprintf("plots/%s_", gsub("\\.rmarkdown", "", knitr::current_input()))
)

# FIXME: Fix this!

# Load sample sequence (requires columns `File.Name` and `Sample.Name`, can also be written as `File Name` and `Sample Name` in .csv)
df.sequence <- read.csv(file = file.path("data", "sequence.csv"),
                        header = TRUE,
                        stringsAsFactors = TRUE, skip=1) %>%
                                    
                        select(filename = File.Name, 
                               sample_name = Sample.Name)

```

# Optional User Inputs

```{r}
#| label: user inputs
Reference <- 'USGS35'
Sample <- 'USGS32'


# known ratios vs Air/VSMOWM
known_ratios <- tibble(
  isotopocule = c("15N", "17O", "18O"),
  reference = c("Air-N2", "VSMOW", "VSMOW"),
  ratio_known = c(0.003676, 0.001140, 0.006016)
)
delta_Reference <- tibble(
  isotopocule = c("15N", "17O", "18O"),
  delta_known = c(+2.7, +50.35, +57.5)
)
delta_Sample <- tibble(
  isotopocule = c("15N", "17O", "18O"),
  delta_known = c(+180.0, +13.2, +25.7)
)
```

# Data

```{r}
#| label: data
flow_injections <- 
  "data/nitrate" |>
  orbi_find_isox() |> # finds all .isox files in a folder
  orbi_read_isox() |> # reads the .isox files into a tibble data frame
  mutate(
    injection = filename |> str_extract("\\d+$") |> as.integer(),)|>
  orbi_simplify_isox(add = c("intensity", "injection")) |> # keeps only columns that are directly relevant for isotopocule ratio analysis
  # focus on injections with signal
  #filter(sample_name != Reference &  sample_name != Sample) |>
  # define data block
  orbi_define_block(start_time.min = 0.5, end_time.min = 6.5) |>
  # flag extreme TICxIT values
  orbi_flag_outliers(agc_fold_cutoff = 2) 
  # get injection number, and sample name from filename 

flow_injections <- subset(flow_injections, select=-sample_name)
  
flow_injections <- merge(flow_injections, df.sequence,  by = "filename") %>% droplevels()
  
flow_injections <- flow_injections  %>% filter(flow_injections$sample_name == Reference |  flow_injections$sample_name == Sample)
```

# Calculations

## Ratios

```{r}
#| label: calculate ratios
# with basepeak
flow_injections_w_basepeak <- 
  flow_injections |>
  orbi_define_basepeak("M0") # sets one isotopocule in the data frame as the base peak (ratio denominator)

# ratios
flow_injections_ratios <- 
  flow_injections_w_basepeak |>
  orbi_calculate_ratios()

# ratio summary
flow_injections_summary <- 
  flow_injections_w_basepeak |>
  # filter out the outliers flagged earlier
  orbi_filter_flagged_data() |> # filters out data that have been flagged using the previous functions
  orbi_summarize_results(ratio_method = "sum") |>
  mutate(
    is_ref = sample_name == Reference
  )
```

## Delta values

```{r}
#| label: calculate delta values

# delta ratios
delta_ratios <-
  flow_injections_summary |>
  filter(data_type == "data") |>
  select(is_ref, injection, isotopocule, basepeak, ratio, ratio_sem)

# calculate deltas by bracketing
deltas <- 
  delta_ratios |>
  # bracketing
  filter(!is_ref) |>
  left_join(
    delta_ratios |> 
      filter(is_ref) |> 
      rename(
        ref_before = injection, ref_before_ratio = ratio, 
        ref_before_ratio_sem = ratio_sem
      ) |> select(-is_ref),
    by = c("isotopocule", "basepeak"),
    relationship = "many-to-many") |>
  filter(injection == ref_before + 1L) |>
  left_join(
    delta_ratios |> 
      filter(is_ref) |> 
      rename(
        ref_after = injection, ref_after_ratio = ratio, 
        ref_after_ratio_sem = ratio_sem
      ) |> select(-is_ref),
    by = c("isotopocule", "basepeak"),
    relationship = "many-to-many") |>
  filter(injection == ref_after - 1L) |>
  mutate(sample_name = Sample) |>
  # delta calculations
  left_join(rename(delta_Reference, delta_ref = delta_known), by = "isotopocule") |>
  mutate(
    # average the bracketing standard
    ref_ratio = 0.5 * (ref_before_ratio + ref_after_ratio),
    ref_ratio_sem = 0.5 * sqrt(ref_before_ratio_sem^2 + ref_after_ratio_sem^2),
    # calculate deltas
    delta = ratio/ref_ratio * (delta_ref + 1000) - 1000,
    delta_sem = (delta + 1000) * sqrt( (ratio_sem/ratio)^2 + (ref_ratio_sem/ref_ratio)^2)
  ) |>
  select(-is_ref) |>
  arrange(isotopocule, injection)
deltas |> orbi_export_data_to_excel("output/nitrate_data_all.xlsx")

# deltas summary
deltas_summary <- 
  deltas |>
  left_join(known_ratios, by = "isotopocule") |>
  mutate(ratio_corr = (delta/1000 + 1) * ratio_known) |>
  group_by(sample_name, isotopocule) |>
  summarize(
    isotopocule_ratio = sprintf("%s/%s", isotopocule[1], basepeak[1]),
    n = n(),
    ratio_raw_mean = mean(ratio),
    ratio_raw_sdev_rel = sd(ratio) / ratio_raw_mean,
    ratio_corrected_mean = mean(ratio_corr),
    ratio_corrected_sdev_rel = sd(ratio_corr) / ratio_corrected_mean,
    delta_mean = mean(delta),
    delta_sdev = sd(delta),
    .groups = "drop"
  ) |>
  # add expected values
  left_join(rename(delta_Sample, delta_expected = delta_known), by = "isotopocule") |>
  left_join(rename(known_ratios, reference_ratio = ratio_known), by = "isotopocule") |>
  mutate(ratio_expected = (delta_expected/1000 + 1) * reference_ratio) |>
  select(-isotopocule)
```

# Table - ratios

```{r}
#| label: table-ratio
deltas_summary |>
  select(
    sample_name, isotopocule_ratio, ratio_expected, n,
    starts_with("ratio_raw"), starts_with("ratio_corrected")
  ) |>
  orbi_export_data_to_excel("output/table_nitrate_ratios.xlsx") # exports the final dataset into an Excel file
```


# Table - delta values

```{r}
#| label: table-delta
deltas_summary |>
  select(
    isotopocule_ratio, reference, reference_ratio, 
    ratio_corrected_mean, delta_expected, n, delta_mean, delta_sdev
  ) |>
  orbi_export_data_to_excel("output/table_nitrate_deltas.xlsx") # exports the final dataset into an Excel file
```


